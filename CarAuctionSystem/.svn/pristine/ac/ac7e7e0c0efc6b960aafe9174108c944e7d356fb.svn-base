using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace WarehouseManagement
{
    public class PlacingOfItems
    {
        private int shippingArea;
        public List<Item> heavyItemList = new List<Item>();
        public List<Item> lightItemList = new List<Item>();
        public List<Aisle> aisleList = new List<Aisle>();

        public PlacingOfItems(int aisles, int spaces){
            InStock stock = new InStock();
            List<Item> totalItemList = stock.GetItems();

            //Divides the list into heavy and light item lists
            foreach (Item k in totalItemList)
            {
                if (k.Weight >= 20)
                    heavyItemList.Add(k);
                else
                    lightItemList.Add(k);
            }

            SortByPopularity();

            //Makes aisles in the warehouse
            for (int i = 0; i < aisles; i++)
                aisleList.Add(new Aisle(spaces, i + 1));
            SetItems();
            
        }

        public Dictionary<int, Adress> GetResult()
        {
            throw new System.NotImplementedException();
        }

        public void SetShippingArea(int aisle)
        {
            shippingArea = aisle;
        }

        private int SetHeavyArea()
        {
            int count = heavyItemList.Count;
            int numberOfAisles = 1;
            bool enoughSpaceFound = false;

            while (count != 0 && !enoughSpaceFound)
            {
                if (count <= aisleList[0].StorageSpaceList.Capacity * numberOfAisles)
                {
                    for (int k = 0; k < numberOfAisles; k++)
                        aisleList[k].IsHeavy = true;
                   
                    enoughSpaceFound = true;
                }
                else
                    numberOfAisles++;     
            }
            return count==0 ? 0 : numberOfAisles;
        }

        private void SortByPopularity()
        {
            heavyItemList = (from p in heavyItemList
                             orderby p.Popularity descending
                             select p).ToList();

            lightItemList = (from p in lightItemList
                             orderby p.Popularity descending
                             select p).ToList();
        }

      

        public void SetItems()
        {
            /*int currentStorageSpace;
            int currentItem = 0;
            int heavyAislesNeeded = SetHeavyArea();
            int numberOfStorageSpaces = aisleList[0].StorageSpaceList.Capacity;

            Console.WriteLine("heavyAislesNeeded: " + heavyAislesNeeded);

            for (int i = 0; i < heavyAislesNeeded; i++ )
            {
                currentStorageSpace = 0;
                while (currentItem < heavyItemList.Count && currentItem < numberOfStorageSpaces )
                {
                    //Place item on heavy aisles storagespace
                    aisleList[i].StorageSpaceList[currentStorageSpace].item = heavyItemList[currentItem];
                    currentStorageSpace++;
                    currentItem++;
                   
                }
                
            }*/
            int currentAisle = 0;
            int currentStorageSpace = 0;
            foreach (Item heavyItem in heavyItemList)
            {
                aisleList[currentAisle].StorageSpaceList[currentStorageSpace].item = heavyItem;
                currentStorageSpace++;
                if (currentStorageSpace == aisleList[currentAisle].capacity)
                {
                    currentAisle++;
                    currentStorageSpace = 0;
                }
            }


        }


        public void Clear()
        {
            throw new System.NotImplementedException();
        }

        public void SetWarehouseSize()
        {
            throw new System.NotImplementedException();
        }

        private List<Item> PopAllHeavyItems()
        {
            throw new System.NotImplementedException();
        }

        private bool AisleIsHeavy(int aisle)
        {
            throw new System.NotImplementedException();
        }

        private void PlaceOnAisle(int aisle)
        {
            throw new System.NotImplementedException();
        }

        private Dictionary<int, Adress> GenerateResult()
        {
            throw new System.NotImplementedException();
        }
    }
}
