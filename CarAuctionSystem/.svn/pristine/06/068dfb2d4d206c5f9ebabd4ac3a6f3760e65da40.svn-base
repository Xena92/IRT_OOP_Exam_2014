using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

//Ida
namespace CarAuctionSystem
{
    public abstract class Vehicle
    {
        //Fields
        private string name;
        private decimal newPrice;
        protected double motorSize;
        private EnergyClass energyClass;
        private string regNumber;

        //Properties
        public string Name
        {
            get
            {
                return name;
            }
            set
            {
                if (value == null)
                    throw new ArgumentNullException("Name can not be assigned null");
                else
                    name = value;
            }
        }

        public uint Km
        {
            get;
            set;
            
        }

        public string RegNumber
        {
            get
            {
                return manipulateRegistration();
            }
            set
            {
                if (CheckRegistration(value))
                    regNumber = value;
                
                else
                    //Vi skal nok lige have lavet vores egen exception...
                    throw new Exception("The registration number is not valid");
            }
        }

        public uint Year
        {
            get;
            private set;

        }

        public decimal NewPrice
        {
            get
            {
                return newPrice;
            }
            set
            {
                if (value < 0)
                    value = 0;
                else
                    newPrice = value;
            }
        }

        public bool Hitch
        {
            get;
            set;
        }

        public virtual double MotorSize
        {
            get
            {
                return motorSize;
            }
            set
            {
                //Standard for trucks and busses is 4.2-15 l. The values will be overrided if it is a car or autocamper.
                if (value == 4.2 || value == 15)
                    motorSize = value;
                else
                    throw new ArgumentOutOfRangeException("Not a valid value!");
            }

        }

        public double KmPrLiter
        {
            get;
            set;
        }

        public virtual EnergyClass EnergyClass
        {
            get
            {
                return energyClass;
            }
            protected set
            {
                energyClass = value;
            }
        }

        public FuelType FuelType
        {
            get
            {
                throw new System.NotImplementedException();
            }
            set
            {
            }
        }

        public virtual LicenceType LicenceType
        {
            get
            {
                throw new System.NotImplementedException();
            }
            set
            {
            }
        }

        //Constructors
        public Vehicle(uint year, FuelType fuelType, double kmPrLiter) // add more if needed
        {
            this.Year = year;
            this.KmPrLiter = kmPrLiter;
            this.FuelType = fuelType;
            FindEnergyClass();
        }

        //Methods

        private virtual void FindEnergyClass()
        {
            if (Year < 2010)
            {
                if (FuelType == FuelType.Diesel)
                {
                    if (KmPrLiter >= 23)
                        energyClass = EnergyClass.A;

                    else if (KmPrLiter >= 18)
                        energyClass = EnergyClass.B;

                    else if (KmPrLiter >= 13)
                        energyClass = EnergyClass.C;

                    else
                        energyClass = EnergyClass.D;

                }
                else
                {
                    if (KmPrLiter >= 18)
                        energyClass = EnergyClass.A;

                    else if (KmPrLiter >= 14)
                        energyClass = EnergyClass.B;

                    else if (KmPrLiter >= 10)
                        energyClass = EnergyClass.C;

                    else
                        energyClass = EnergyClass.D;
                }

            }
            //Vehicles newer than 2010
            else
            {
                if (FuelType == FuelType.Diesel)
                {
                    if (KmPrLiter >= 25)
                        energyClass = EnergyClass.A;

                    else if (KmPrLiter >= 20)
                        energyClass = EnergyClass.B;

                    else if (KmPrLiter >= 15)
                        energyClass = EnergyClass.C;

                    else
                        energyClass = EnergyClass.D;

                }
                else
                {
                    if (KmPrLiter >= 20)
                        energyClass = EnergyClass.A;

                    else if (KmPrLiter >= 16)
                        energyClass = EnergyClass.B;

                    else if (KmPrLiter >= 12)
                        energyClass = EnergyClass.C;

                    else
                        energyClass = EnergyClass.D;
                }
            }
        }

        private bool CheckRegistration(string regNumber)
        {
            int isLengthCheck = 0;
            bool isLetterCheck = false;
            int isNumberCheck = 2;
            
            //Check length
            foreach (char c in regNumber)
            {
                isLengthCheck++;
            }

            if (isLengthCheck != 7)
                return false;
            
            //Check if it is two letters
            if (char.IsLetter(regNumber[0]) && char.IsLetter(regNumber[1]))
                isLetterCheck = true;

            else
                return false;
            
            //Check if the last 5 is numbers.
            while(char.IsNumber(regNumber[isNumberCheck]) && isNumberCheck < 7)
                isNumberCheck++;
            
            
            //If all the above is true return true.
            if (isLengthCheck == 5 && isLetterCheck == true && isNumberCheck == 7)
                return true;

            else
                return false;
        }

        private string manipulateRegistration()
        {
            String regNumbCpy = "**" + this.regNumber[2] + this.regNumber[3] + this.regNumber[4] + "**";

            return regNumbCpy;
        }


        public override string ToString()
        {
            return String.Format("[{0}]{1} {2} DKR {3} km {4} km/l", base.ToString(), Name, NewPrice, Km, KmPrLiter);
            throw new System.NotImplementedException();
        }
    }
}
