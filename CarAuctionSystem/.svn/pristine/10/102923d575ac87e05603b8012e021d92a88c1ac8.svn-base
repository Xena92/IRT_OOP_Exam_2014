using System;

//Ida

namespace CarAuctionSystem
{
    public abstract class Vehicle
    {
        //Fields
        private EnergyClass energyClass;
        protected double motorSize;
        private string name;
        private decimal newPrice;

        private string regNumber;

        protected Vehicle(string name, decimal newPrice, double motorSize, string regNumber, uint year, uint km,
            bool hitch, double kmPrLiter, FuelType fuelType)
        {
            this.name = name;
            this.newPrice = newPrice;
            this.motorSize = motorSize;
            this.regNumber = regNumber;
            Year = year;
            Km = km;
            Hitch = hitch;
            KmPrLiter = kmPrLiter;
            FuelType = fuelType;
            FindEnergyClass();
        }

        //Properties
        public string Name
        {
            get { return name; }

            set
            {
                if (value == null)
                    throw new ArgumentNullException("Name can not be assigned null");

                name = value;
            }
        }

        public uint Km { get; set; }

        public string RegNumber
        {
            get { return ManipulateRegistration(); }
            set
            {
                if (CheckRegistration(value))
                    regNumber = value;

                else
                    throw new ArgumentException("The registration number is not valid");
            }
        }

        public uint Year { get; private set; }

        public decimal NewPrice
        {
            get { return newPrice; }
            set { newPrice = Math.Max(value, 0); }
        }

        public bool Hitch { get; set; }

        public virtual double MotorSize
        {
            get { return motorSize; }
            set
            {
                //Standard for trucks and busses is 4.2-15 l. The values will be overrided if it is a car or autocamper.
                if (value >= 4.2 && value <= 15)
                    motorSize = value;
                else
                    throw new ArgumentOutOfRangeException("Not a valid value!");
            }
        }

        public double KmPrLiter { get; set; }

        public virtual EnergyClass EnergyClass
        {
            get { return energyClass; }
            protected set { energyClass = value; }
        }

        public FuelType FuelType { get; set; }

        public virtual LicenceType LicenceType { get; set; }

        public override int GetHashCode()
        {
            return regNumber.GetHashCode() ^ name.GetHashCode() ^ newPrice.GetHashCode() ^ motorSize.GetHashCode();
        }

        //Constructors

        //Methods

        //Method for finding what energyclass a vehicle belong to.
        protected virtual void FindEnergyClass()
        {
            if (Year < 2010)
            {
                if (FuelType == FuelType.Diesel)
                {
                    if (KmPrLiter >= 23)
                        energyClass = EnergyClass.A;

                    else if (KmPrLiter >= 18)
                        energyClass = EnergyClass.B;

                    else if (KmPrLiter >= 13)
                        energyClass = EnergyClass.C;

                    else
                        energyClass = EnergyClass.D;
                }
                else
                {
                    if (KmPrLiter >= 18)
                        energyClass = EnergyClass.A;

                    else if (KmPrLiter >= 14)
                        energyClass = EnergyClass.B;

                    else if (KmPrLiter >= 10)
                        energyClass = EnergyClass.C;

                    else
                        energyClass = EnergyClass.D;
                }
            }
                //Vehicles newer than 2010
            else
            {
                if (FuelType == FuelType.Diesel)
                {
                    if (KmPrLiter >= 25)
                        energyClass = EnergyClass.A;

                    else if (KmPrLiter >= 20)
                        energyClass = EnergyClass.B;

                    else if (KmPrLiter >= 15)
                        energyClass = EnergyClass.C;

                    else
                        energyClass = EnergyClass.D;
                }
                else
                {
                    if (KmPrLiter >= 20)
                        energyClass = EnergyClass.A;

                    else if (KmPrLiter >= 16)
                        energyClass = EnergyClass.B;

                    else if (KmPrLiter >= 12)
                        energyClass = EnergyClass.C;

                    else
                        energyClass = EnergyClass.D;
                }
            }
        }

        //Method for checking if the registration number is valid
        private bool CheckRegistration(string regNumber)
        {
            int isNumberCheck = 2;

            if (regNumber.Length != 7)
                return false;

            //Check if it is two letters
            if (!char.IsLetter(regNumber[0]) || !char.IsLetter(regNumber[1]))
                return false;

            //Check if the last 5 is numbers.
            while (char.IsNumber(regNumber[isNumberCheck]) && isNumberCheck < 6)
            {
                isNumberCheck++;
            }

            //If all the above is true return true.
            if (isNumberCheck == 6)
                return true;

            else
                return false;
        }

        //Manipulates the string to only show the 3 first numbers.
        private string ManipulateRegistration()
        {
            String regNumbCpy = "**" + this.regNumber[2] + this.regNumber[3] + this.regNumber[4] + "**";

            return regNumbCpy;
        }


        public override string ToString()
        {
            return String.Format("{6} {0} {1} DKR {2} km {3} km/l {4} {5}", Name, NewPrice, Km, KmPrLiter,
                FuelType, Year, GetType());
        }
    }
}