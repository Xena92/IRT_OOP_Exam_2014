using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace WarehouseManagement
{
    public class Knapsack
    {
        public class Bag : IEnumerable<Bag.Item>
        {
            private List<Item> itemsToPickUp;
            private const int MaxWeightAllowed = 400;

            public Bag()
            {
                itemsToPickUp = new List<Item>();
            }

            private void AddItem(Item i)
            {
                if ((TotalWeight + i.Weight) < MaxWeightAllowed)
                    itemsToPickUp.Add(i);
            }

            public void Calculate(List<Item> items)
            {
                foreach (Item i in Sorte(items))
                {
                    AddItem(i);
                }
            }

            private List<Item> Sorte(List<Item> inputItems)
            {
               List<Item> pickitems = new List<Item>();
                int i;
                for (i = 0; i < inputItems.Count; i++)
                    {
                        int j = -1;
                        if (i == 0)
                        {
                            pickitems.Add(inputItems[i]);
                        }
                        if (i > 0)
                        {
                            if (!RecursiveF(inputItems, pickitems, i, pickitems.Count - 1, false, ref j))
                            {
                                pickitems.Add(inputItems[i]);
                            }
                        }
                    }
                    return pickitems;
                }
            

            bool RecursiveF(List<Item> knapsackItems, List<Item> pickitems, int i, int lastBound, bool dec,
            ref int indxToAdd)
            {
                if (!(lastBound < 0))
                {
                    if (knapsackItems[i].ResultWV < pickitems[lastBound].ResultWV)
                    {
                        indxToAdd = lastBound;
                    }
                    return RecursiveF(knapsackItems, pickitems, i, lastBound - 1, true, ref indxToAdd);
                }
                if (indxToAdd > -1)
                {
                    pickitems.Insert(indxToAdd, knapsackItems[i]);
                    return true;
                }
                return false;
            }

            #region IEnumerable<Item> Members

            IEnumerator<Item> IEnumerable<Item>.GetEnumerator()
            {
                foreach (Item i in itemsToPickUp)
                    yield return i;
            }

            #endregion

            #region IEnumerable Members

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
            {
                return itemsToPickUp.GetEnumerator();
            }

            #endregion

            public int TotalWeight
            {
                get
                {
                    var sum = 0;
                    foreach (Item i in this)
                    {
                        sum += i.Weight;
                    }
                    return sum;
                }
            }

            public class Item
            {
                public string Name { get; set; }
                public int Weight { get; set; }
                public int Value { get; set; }
                public int Row { get; set; }
                public int shelf { get; set; }
                public int storey { get; set; }
                

                public int ResultWV
                {
                    get { return Weight - Value; }
                }

                public override string ToString()
                {
                    return "Name : " + Name + "        Wieght : " + Weight + "       Value : " + Value +
                           /*"     ResultWV : " + ResultWV +*/ "      Row : " + Row + "      shelf : " + shelf + "      storey : " + storey;
                }
            }
        }
    }
}
