using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;

namespace WarehouseManagement
{
    /// <summary>
    /// A builder design patteren implementation that builds a list of the shortest tour between all items in a list.
    /// </summary>
    public class ShortestPath
    {
        private int _aisles;
        private int _spaces;
        //TODO: Lav et andet system til at styre hvor brede rækkerne er
        private const int UnitsPrAisle = 2;
        private readonly Graph<string> _baseGraph;
        private Graph<string> _instanceGraph;
        private int _vertIndex;

        public ShortestPath(int aisles, int spaces)
        {
            _aisles = aisles;
            _spaces = spaces;
            _baseGraph = CreateBaseGraph(aisles, spaces);
            _instanceGraph = new Graph<string>(_baseGraph);
        }

        private Graph<string> CreateBaseGraph(int aisles, int spaces)
        {
            var graph = new Graph<string>();
            graph.AddEdge("a0", "b0", spaces);
            for (int i = 1; i < aisles; i++)
            {
                graph.AddEdge("a" + i, "b" + i, spaces);
                graph.AddEdge("a" + i, "a" + (i - 1), UnitsPrAisle);
            }
            return graph;
        }

        public void InsertItem(Adress adress)
        {
            InsertItem(adress.Aisle, adress.Shelf/2);
        }

        public void InsertItem(int aisle, int space)
        {
            var vertFrom = "a" + aisle;
            var vertTo = "b" + aisle;
            string previous = "";

            var vert = _instanceGraph.GetVertex(vertFrom);
            var connections = vert.GetConnections();

            while (!connections.Contains(vertTo))
            {
                var connection = connections.FirstOrDefault(s => !_baseGraph.Contains(s) && s != previous);
                if (String.IsNullOrEmpty(connection))
                    throw new Exception("Connections must be invalid or something.");

                if (vert.GetWeight(connection) > space)
                {
                    vertTo = connection;
                }
                else
                {
                    previous = vertFrom;
                    vertFrom = connection;
                    space -= vert.GetWeight(connection);
                }
                vert = _instanceGraph.GetVertex(vertFrom);
                connections = vert.GetConnections();
            }

            _instanceGraph.InsertVertex("v" + _vertIndex++, vertFrom, vertTo, space);
        }

        public int GetLength(int configuration, int aisle)
        {
            switch (configuration)
            {
                case 1:
                    return DistanceOnAisle("a" + aisle, "b" + aisle);                   
                case 2:
                    var a = _instanceGraph.GetVertex("a" + aisle);
                    var conA = a.GetConnections().FirstOrDefault(s => !s.Contains('a'));
                    var resultA = (_spaces - a.GetWeight(conA))*2;
                    return resultA == 0 ? 1000000 : resultA;
                case 3:
                    var b = _instanceGraph.GetVertex("b" + aisle);
                    var conB = b.GetConnections().FirstOrDefault(s => !s.Contains('b'));
                    var resultB = (_spaces - b.GetWeight(conB))*2;
                    return resultB == 0 ? 1000000 : resultB;
                case 4:
                    var gap = GreatestGap(aisle);
                    var result = (_spaces - _instanceGraph.GetVertex(gap[0]).GetWeight(gap[1])) * 2;
                    return result == 0 ? 1000000 : result;
                case 5:
                    return DistanceOnAisle("a" + aisle, "b" + aisle)*2;
                case 6:
                    return ContainsItems(aisle) ? 1000000 : 0;

                case 11: case 12: case 13:
                    return UnitsPrAisle*2;
                case 14:
                    return UnitsPrAisle*4;
                case 15:
                    return 0;

                default:
                    return int.MaxValue;
            }
        }

        /// <summary>
        /// Finds the shortest path in the given warehouse configuration
        /// </summary>
        /// <returns>Returns an array of item IDs, sorted by the order they should be picked</returns>
        public int[] GetResult()
        {
            var PTG = new PartialTourGraph[7];

            PTG[5] = new PartialTourGraph();

            for (int i = 0; i < _aisles; i++)
            {
                var lengths = new int[16];
                for (int j = 1; j < 16; j++)
                {
                    lengths[j] = GetLength(j, i);
                }
                var ptg = new PartialTourGraph[7];

                for (int j = 0; j < 7; j++)
                {
                    if (PTG[j] == null)
                        continue;

                    switch (j)
                    {
                        case 0:
                            if (ptg[3] == null || ptg[3].Length > PTG[j].Length + lengths[1])
                                ptg[3] = new PartialTourGraph(PTG[j].Length + lengths[1], PTG[j], 1);
                            if (ptg[0] == null || ptg[0].Length > PTG[j].Length + lengths[2])
                                ptg[0] = new PartialTourGraph(PTG[j].Length + lengths[2], PTG[j], 2);
                            if (ptg[0].Length > PTG[j].Length + lengths[3])
                                ptg[0] = new PartialTourGraph(PTG[j].Length + lengths[3], PTG[j], 3);
                            if (ptg[0].Length > PTG[j].Length + lengths[4])
                                ptg[0] = new PartialTourGraph(PTG[j].Length + lengths[4], PTG[j], 4);
                            if (ptg[0].Length > PTG[j].Length + lengths[5])
                                ptg[0] = new PartialTourGraph(PTG[j].Length + lengths[5], PTG[j], 5);
                            if (ptg[0].Length > PTG[j].Length + lengths[6])
                                ptg[0] = new PartialTourGraph(PTG[j].Length + lengths[6], PTG[j], 6);
                            break;
                        case 1:
                            if (ptg[0] == null || ptg[0].Length > PTG[j].Length + lengths[1])
                                ptg[0] = new PartialTourGraph(PTG[j].Length + lengths[1], PTG[j], 1);
                            if (ptg[1] == null || ptg[1].Length > PTG[j].Length + lengths[2])
                                ptg[1] = new PartialTourGraph(PTG[j].Length + lengths[2], PTG[j], 2);
                            if (ptg[4] == null || ptg[4].Length > PTG[j].Length + lengths[3])
                                ptg[4] = new PartialTourGraph(PTG[j].Length + lengths[3], PTG[j], 3);
                            if (ptg[4].Length > PTG[j].Length + lengths[4])
                                ptg[4] = new PartialTourGraph(PTG[j].Length + lengths[4], PTG[j], 4);
                            if (ptg[3] == null || ptg[3].Length > PTG[j].Length + lengths[5])
                                ptg[3] = new PartialTourGraph(PTG[j].Length + lengths[5], PTG[j], 5);
                            if (ptg[1].Length > PTG[j].Length + lengths[6])
                                ptg[1] = new PartialTourGraph(PTG[j].Length + lengths[6], PTG[j], 6);
                            break;
                        case 2:
                            if (ptg[0] == null || ptg[0].Length > PTG[j].Length + lengths[1])
                                ptg[0] = new PartialTourGraph(PTG[j].Length + lengths[1], PTG[j], 1);
                            if (ptg[4] == null || ptg[4].Length > PTG[j].Length + lengths[2])
                                ptg[4] = new PartialTourGraph(PTG[j].Length + lengths[2], PTG[j], 2);
                            if (ptg[2] == null || ptg[2].Length > PTG[j].Length + lengths[3])
                                ptg[2] = new PartialTourGraph(PTG[j].Length + lengths[3], PTG[j], 3);
                            if (ptg[4].Length > PTG[j].Length + lengths[4])
                                ptg[4] = new PartialTourGraph(PTG[j].Length + lengths[4], PTG[j], 4);
                            if (ptg[3] == null || ptg[3].Length > PTG[j].Length + lengths[5])
                                ptg[3] = new PartialTourGraph(PTG[j].Length + lengths[5], PTG[j], 5);
                            if (ptg[2].Length > PTG[j].Length + lengths[6])
                                ptg[2] = new PartialTourGraph(PTG[j].Length + lengths[6], PTG[j], 6);
                            break;
                        case 3:
                            if (ptg[0] == null || ptg[0].Length > PTG[j].Length + lengths[1])
                                ptg[0] = new PartialTourGraph(PTG[j].Length + lengths[1], PTG[j], 1);
                            if (ptg[3] == null || ptg[3].Length > PTG[j].Length + lengths[2])
                                ptg[3] = new PartialTourGraph(PTG[j].Length + lengths[2], PTG[j], 2);
                            if (ptg[3].Length > PTG[j].Length + lengths[3])
                                ptg[3] = new PartialTourGraph(PTG[j].Length + lengths[3], PTG[j], 3);
                            if (ptg[3].Length > PTG[j].Length + lengths[4])
                                ptg[3] = new PartialTourGraph(PTG[j].Length + lengths[4], PTG[j], 4);
                            if (ptg[3].Length > PTG[j].Length + lengths[5])
                                ptg[3] = new PartialTourGraph(PTG[j].Length + lengths[5], PTG[j], 5);
                            if (ptg[3].Length > PTG[j].Length + lengths[6])
                                ptg[3] = new PartialTourGraph(PTG[j].Length + lengths[6], PTG[j], 6);
                            break;
                        case 4:
                            if (ptg[0] == null || ptg[0].Length > PTG[j].Length + lengths[1])
                                ptg[0] = new PartialTourGraph(PTG[j].Length + lengths[1], PTG[j], 1);
                            if (ptg[4] == null || ptg[4].Length > PTG[j].Length + lengths[2])
                                ptg[4] = new PartialTourGraph(PTG[j].Length + lengths[2], PTG[j], 2);
                            if (ptg[4].Length > PTG[j].Length + lengths[3])
                                ptg[4] = new PartialTourGraph(PTG[j].Length + lengths[3], PTG[j], 3);
                            if (ptg[4].Length > PTG[j].Length + lengths[4])
                                ptg[4] = new PartialTourGraph(PTG[j].Length + lengths[4], PTG[j], 4);
                            if (ptg[3] == null || ptg[3].Length > PTG[j].Length + lengths[5])
                                ptg[3] = new PartialTourGraph(PTG[j].Length + lengths[5], PTG[j], 5);
                            if (ptg[4].Length > PTG[j].Length + lengths[6])
                                ptg[4] = new PartialTourGraph(PTG[j].Length + lengths[6], PTG[j], 6);
                            break;
                        case 5:
                            if (ptg[0] == null || ptg[0].Length > PTG[j].Length + lengths[1])
                                ptg[0] = new PartialTourGraph(PTG[j].Length + lengths[1], PTG[j], 1);
                            if (ptg[1] == null || ptg[1].Length > PTG[j].Length + lengths[2])
                                ptg[1] = new PartialTourGraph(PTG[j].Length + lengths[2], PTG[j], 2);
                            if (ptg[2] == null || ptg[2].Length > PTG[j].Length + lengths[3])
                                ptg[2] = new PartialTourGraph(PTG[j].Length + lengths[3], PTG[j], 3);
                            if (ptg[4] == null || ptg[4].Length > PTG[j].Length + lengths[4])
                                ptg[4] = new PartialTourGraph(PTG[j].Length + lengths[4], PTG[j], 4);
                            if (ptg[3] == null || ptg[3].Length > PTG[j].Length + lengths[5])
                                ptg[3] = new PartialTourGraph(PTG[j].Length + lengths[5], PTG[j], 5);
                            if (ptg[5] == null || ptg[5].Length > PTG[j].Length + lengths[6])
                                ptg[5] = new PartialTourGraph(PTG[j].Length + lengths[6], PTG[j], 6);
                            break;
                        case 6:
                            if (ptg[6] == null || ptg[4].Length > PTG[j].Length + lengths[6])
                                ptg[6] = new PartialTourGraph(PTG[j].Length + lengths[6], PTG[j], 6);
                            break;
                    }
                }
                PTG = ptg;
                ptg = new PartialTourGraph[7];
                for (int j = 0; j < 7; j++)
                {
                    if (PTG[j] == null)
                        continue;

                    switch (j)
                    {
                        case 0:
                            if (ptg[0] == null || ptg[0].Length > PTG[j].Length + lengths[11])
                                ptg[0] = new PartialTourGraph(PTG[j].Length + lengths[11], PTG[j], 11);
                            break;
                        case 1:
                            if (ptg[1] == null || ptg[1].Length > PTG[j].Length + lengths[12])
                                ptg[1] = new PartialTourGraph(PTG[j].Length + lengths[12], PTG[j], 12);
                            if (ptg[4] == null || ptg[4].Length > PTG[j].Length + lengths[14])
                                ptg[4] = new PartialTourGraph(PTG[j].Length + lengths[14], PTG[j], 14);
                            if (ptg[6] == null || ptg[6].Length > PTG[j].Length + lengths[15])
                                ptg[6] = new PartialTourGraph(PTG[j].Length + lengths[15], PTG[j], 15);
                            break;
                        case 2:
                            if (ptg[2] == null || ptg[2].Length > PTG[j].Length + lengths[13])
                                ptg[2] = new PartialTourGraph(PTG[j].Length + lengths[13], PTG[j], 13);
                            if (ptg[4] == null || ptg[4].Length > PTG[j].Length + lengths[14])
                                ptg[4] = new PartialTourGraph(PTG[j].Length + lengths[14], PTG[j], 14);
                            if (ptg[6] == null || ptg[6].Length > PTG[j].Length + lengths[15])
                                ptg[6] = new PartialTourGraph(PTG[j].Length + lengths[15], PTG[j], 15);
                            break;
                        case 3:
                            if (ptg[1] == null || ptg[1].Length > PTG[j].Length + lengths[12])
                                ptg[1] = new PartialTourGraph(PTG[j].Length + lengths[12], PTG[j], 12);
                            if (ptg[2] == null || ptg[2].Length > PTG[j].Length + lengths[13])
                                ptg[2] = new PartialTourGraph(PTG[j].Length + lengths[13], PTG[j], 13);
                            if (ptg[3] == null || ptg[3].Length > PTG[j].Length + lengths[14])
                                ptg[3] = new PartialTourGraph(PTG[j].Length + lengths[14], PTG[j], 14);
                            if (ptg[6] == null || ptg[6].Length > PTG[j].Length + lengths[15])
                                ptg[6] = new PartialTourGraph(PTG[j].Length + lengths[15], PTG[j], 15);
                            break;
                        case 4:
                            if (ptg[4] == null || ptg[4].Length > PTG[j].Length + lengths[14])
                                ptg[4] = new PartialTourGraph(PTG[j].Length + lengths[14], PTG[j], 14);
                            break;
                        case 5:
                            if (ptg[5] == null || ptg[5].Length > PTG[j].Length + lengths[15])
                                ptg[5] = new PartialTourGraph(PTG[j].Length + lengths[15], PTG[j], 15);
                            break;
                        case 6:
                            if (ptg[6] == null || ptg[6].Length > PTG[j].Length + lengths[15])
                                ptg[6] = new PartialTourGraph(PTG[j].Length + lengths[15], PTG[j], 15);
                            break;
                    }
                }
                PTG = ptg;
            }
            PartialTourGraph t = PTG[2];
            Console.WriteLine(t.Configuration);
            while (t.Previous != null)
            {
                t = t.Previous;
                Console.WriteLine(t.Configuration);
            }
            return PTG.Where(ptg => ptg != null).Select(ptg => ptg.Length).ToArray();
        }

        /// <summary>
        /// Clears items from list, to make the next calculation possible
        /// </summary>
        public void Clear()
        {
            _instanceGraph = new Graph<string>(_baseGraph);
            _vertIndex = 0;
        }

        public int DistanceOnAisle(string vert1, string vert2, string mask = "")
        {
            if(!_instanceGraph.Contains(vert1) || !_instanceGraph.Contains(vert2))
                throw new ArgumentException("Vertex was not found within the graph");

            var checkedList = new List<string>();
            string vert = vert1;
            string previous = mask;
            int distance = 0;

            while (true)
            {
                var connections =
                    _instanceGraph.GetVertex(vert)
                        .GetConnections()
                        .Where(s => s != previous && !checkedList.Contains(s))
                        .ToArray();

                if (connections.Contains(vert2))
                {
                    distance += _instanceGraph.GetVertex(vert).GetWeight(vert2);
                    break;
                }

                var nextVert = connections.FirstOrDefault(s => !_baseGraph.Contains(s));

                if (String.IsNullOrEmpty(nextVert))
                {
                    distance = 0;
                    nextVert = vert1;
                }
                else
                {
                    distance += _instanceGraph.GetVertex(vert).GetWeight(nextVert);
                }

                checkedList.Add(vert);
                previous = vert;
                vert = nextVert;
            }
            return distance;
        }

        /// <summary>
        /// Checks weather or not the aisle contains any verticies of interest
        /// </summary>
        private bool ContainsItems(int aisle)
        {
            return !_instanceGraph.GetVertex("a" + aisle).GetConnections().Contains("b" + aisle);
        }

        public string[] GreatestGap(int aisle)
        {
            var gap = new string[2];
            int gapSize = -1;
            string previous = "a" + aisle;
            string vert =
                _instanceGraph.GetVertex(previous).GetConnections().FirstOrDefault(s => !s.Contains('a'));
            while (!String.IsNullOrEmpty(vert))
            {
                int iGap = DistanceOnAisle(previous, vert);
                if (iGap > gapSize)
                {
                    gapSize = iGap;
                    gap[0] = previous;
                    gap[1] = vert;
                }

                var nextVert =
                    _instanceGraph.GetVertex(vert)
                        .GetConnections()
                        .FirstOrDefault(s => !_baseGraph.Contains(s) && s != previous);
                previous = vert;
                vert = nextVert;
            }
            return gap;
        }

        private void ShortestTour()
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Constructs the tourgraph from the given list of configurations
        /// </summary>
        /// <param name="configurations">Array of configurations</param>
        /// <returns>Returns a tour graph with the given configurations</returns>
        private Graph<int> ConstructTourGraph(int[] configurations)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Finds a route throught the tour that goes through each item in turn
        /// </summary>
        /// <param name="tour">The tour graph in with to find the route</param>
        /// <returns>Returns a sorted array of integers, these integers are item IDs which needs to be picked in this order to go through the tour</returns>
        private int[] Route(Graph<int> tour)
        {
            throw new NotImplementedException();
        }

        private class PartialTourGraph
        {
            public PartialTourGraph()
            {
                Configuration = 16;
            }

            public PartialTourGraph(int length, PartialTourGraph previous, int configuration)
            {
                Length = length;
                Previous = previous;
                Configuration = configuration;
            }

            public int Length { get; private set; }
            public PartialTourGraph Previous { get; private set; }
            public int Configuration { get; private set; }

            public override string ToString()
            {
                return string.Format("{0}", Length);
            }
        }
    }
}
