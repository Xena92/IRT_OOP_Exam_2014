using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace WarehouseManagement
{
    /// <summary>
    /// A builder design patteren implementation that builds a list of the shortest tour between all items in a list.
    /// </summary>
    public class ShortestPath
    {
        private List<int> items;
        private int aisles;
        private int spaces;
        private int unitsPrAisle;
        /// <summary>
        /// Inserts an item that should be visited when generating the shortest path
        /// </summary>
        /// <param name="aisle">The aisle number of the item adress</param>
        /// <param name="space">The space number of the item</param>
        public void InsertItem(int aisle, int space)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Finds the shortest path in the given warehouse configuration
        /// </summary>
        /// <returns>Returns an array of item IDs, sorted by the order they should be picked</returns>
        public int[] GetResult()
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Clears items from list, to make the next calculation possible
        /// </summary>
        public void Clear()
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Creates a new instance of the base warehouse graph, with the given items inserted as verticies
        /// </summary>
        /// <returns>The newly created graph instance</returns>
        private Graph<int> CreateInstanceGraph()
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Inserts a number of verticies into the warehouse graph
        /// </summary>
        /// <param name="adresses"></param>
        private void InsertVerticies(params Adress[] adresses)
        {
            throw new NotImplementedException();
        }

        private int DistanceOnAisle()
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Checks weather or not the aisle contains any verticies of interest
        /// </summary>
        private bool ContainsItems()
        {
            throw new NotImplementedException();
        }

        private void InsertVertex(int aisle, int space)
        {
            throw new NotImplementedException();
        }

        private void InsertVertex(Adress adress)
        {
            throw new NotImplementedException();
        }

        private int[] GreatestGap(int aisle)
        {
            throw new NotImplementedException();
        }

        private void ShortestTour()
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Constructs the tourgraph from the given list of configurations
        /// </summary>
        /// <param name="configurations">Array of configurations</param>
        /// <returns>Returns a tour graph with the given configurations</returns>
        private Graph<int> ConstructTourGraph(int[] configurations)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Finds a route throught the tour that goes through each item in turn
        /// </summary>
        /// <param name="tour">The tour graph in with to find the route</param>
        /// <returns>Returns a sorted array of integers, these integers are item IDs which needs to be picked in this order to go through the tour</returns>
        private int[] Route(Graph<int> tour)
        {
            throw new NotImplementedException();
        }
    }
}
