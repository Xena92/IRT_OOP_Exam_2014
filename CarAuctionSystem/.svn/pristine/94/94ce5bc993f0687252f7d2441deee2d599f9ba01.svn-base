using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace CarAuctionSystem
{
    public abstract class Trader
    {
        private Dictionary<Vehicle, decimal> expectedPayments;
        protected decimal balance;

        public uint ZipCode { get; private set; }

        protected Trader(decimal balance, uint zip)
        {
            ZipCode = zip;
            this.balance = balance;
            expectedPayments = new Dictionary<Vehicle, decimal>();
        }

        public void NotifyAboutOffer(object sender, EventArgs e)
        {
            var eventArgs = e as OfferEventArgs;

            expectedPayments[eventArgs.Vehicle] = eventArgs.Price - eventArgs.Fees;

            Console.WriteLine("Someone bid on your {0} with registration number {1}. The price is now on {2}.",
                eventArgs.Vehicle.Name, eventArgs.Vehicle.RegNumber, eventArgs.Price);
        }

        public bool ExecutePayment(decimal money, Vehicle product)
        {
            decimal payment;
            expectedPayments.TryGetValue(product, out payment);

            if (payment != money || Balance < payment)
                return false;

            balance += money;
            expectedPayments.Remove(product);
            return true;
        } 

        public virtual decimal Balance
        {
            get;
        }

        public void NotifyOfferOverridden(Vehicle vehicle)
        {
            expectedPayments.Remove(vehicle);
        }

        public void NotifyOfferAccepted(Vehicle vehicle, decimal offer)
        {
            expectedPayments[vehicle] = -offer;
        }
    }
}
